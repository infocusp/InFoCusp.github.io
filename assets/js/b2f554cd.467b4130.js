"use strict";(self.webpackChunkinfocusp_blog=self.webpackChunkinfocusp_blog||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"pygit2","metadata":{"permalink":"/blog/pygit2","editUrl":"https://github.com/InFoCusp/infocusp-blog/tree/main/blog/2022-10-15-pygit2/index.md","source":"@site/blog/2022-10-15-pygit2/index.md","title":"pygit2","description":"Introduction","date":"2022-10-15T00:00:00.000Z","formattedDate":"October 15, 2022","tags":[{"label":"python","permalink":"/blog/tags/python"},{"label":"git","permalink":"/blog/tags/git"}],"readingTime":2.66,"hasTruncateMarker":false,"authors":[{"name":"Jayendra Parmar","title":"Software Engineer @ Infocusp","url":"https://sebastienlorber.com","imageURL":"https://avatars.githubusercontent.com/u/651057?v=4","key":"jayendra"},{"name":"Preet Patel","title":"Software Engineer @ Infocusp","url":"https://sebastienlorber.com","imageURL":"https://avatars.githubusercontent.com/u/105536384?v=4","key":"preet"},{"name":"Cheris Patel","title":"Software Engineer @ Infocusp","url":"https://sebastienlorber.com","imageURL":"https://avatars.githubusercontent.com/u/651058?v=4","key":"cheris"}],"frontMatter":{"slug":"pygit2","title":"pygit2","authors":["jayendra","preet","cheris"],"tags":["python","git"]},"nextItem":{"title":"Awesome ML resources","permalink":"/blog/awesome-ml-resources"}},"content":"\x3c!-- ![python](python-logo.png) --\x3e\\n\\n\\n## Introduction \\n\\n![git](https://git-scm.com/images/logos/downloads/Git-Logo-2Color.svg)\\n\\nGit treats each files as blob object and directory as a tree. Each and every objects are stored as pack files in compressed format in the .git directory. Every pack file will have index (\'.idx\') file. Index file contains metadata about object and it has the entry of object and where its stored.\\n\\npygit2 is the way to communicate with .git directory the way git command does.\\n\\n[PYPI_PACKAGE DOCUMENTATION](https://pypi.org/project/pygit2/)\\n\\nPygit2 is python wrapper to run git functionality via python program. It is build on top of the libgit2. [libgit2](https://github.com/libgit2/libgit2) is a pure C implementation of the Git core methods that enables you to integrate Git functionality into your program.\\n\\n## Features of pygit2\\n\\n- Important for dataset gathering of multiple git repositories.\\n    - We can get any commit, file, metadata from the repository.\\n- Easy to code as it is in python.\\n- (>10x) Faster than other available git wrappers like [GitPython](https://pypi.org/project/GitPython/) or [python-git-wrapper](https://pypi.org/project/python-git-wrapper/).\\n\\n## Installation\\n\\n```bash\\npip install pygit2\\n```\\n\\n\\n## Implementation\\n\\n\\n### Initialize empty git repository\\n```python\\nfrom pygit2 import init_repository\\nrepo = init_repository(\'my_folder/test\', bare=False)\\n```\\n\\n### Clone the repository\\n```python\\nimport pygit2\\nrepoClone = pygit2.clone_repository(\'https://github.com/Preet-786/test.git\', \'my_folder/test\')\\n```\\n\\n### Opening existing repository\\n```python\\nfrom pygit2 import Repository\\nrepo = Repository(\'my_folder/test\')\\n```\\n### Add and commit changes\\n\\nAfter modifying the files\\n```python\\nrepo.index.add_all()\\nrepo.index.write()\\ntree = repo.index.write_tree()\\nparent, ref = repo.resolve_refish(refish=repo.head.name)\\nrepo.create_commit(\\n    ref.name,\\n    repo.default_signature,\\n    repo.default_signature,\\n    \\"Commit message\\",\\n    tree,\\n    [parent.oid],\\n)\\n```\\n### Get head commit\\n```python\\nhead = repo.head\\nprint(f\'CommitId:{head.target}, Branch:{head.name}\')\\nmsg = head.log().__next__()\\nprint(f\'Commit message: {msg.message}\')\\nprint(f\'Commiter: {msg.committer}\')\\n```\\nResults:\\n```bash\\nCommitId:08d8b7f0de4575fc9dfe9da5157e000157630ae0, Branch:refs/heads/main\\nCommit message: commit: Commit message\\nCommiter: preet <preetpatel.nu@gmail.com>\\n```\\n\\n### Check diff of the commit\\n\\nWe can get patch diff of the commit\\n```python\\ncommit_id = repo.head.target\\n\\n# we can get object from it\'s id\\ncommit_obj = repo.get(commit_id)\\n\\ndiff_obj = repo.diff(commit_obj, commit_obj.parents[0])\\nprint(diff_obj.patch)\\n```\\nResult:\\n```bash\\ndiff --git a/ini.py b/ini.py\\ndeleted file mode 100644\\nindex 8909c17..0000000\\n--- a/ini.py\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-hii\\n\\\\ No newline at end of file\\n```\\n\\nWe can see the files which are changed during commit\\n```python\\ncommit_id = repo.head.target\\n\\n# we can get object from it\'s id\\ncommit_obj = repo.get(commit_id)\\n\\n# We can insert two commit ids also in diff\\ndiff_obj = repo.diff(commit_obj.parents[0], commit_obj)\\n\\nfor delta in diff_obj.deltas:\\n    # Status: M=modified, A=added, D=Deleted\\n    print(\\"Status: \\",delta.status_char())\\n    print(f\\"Old File:\\\\nPath: {delta.old_file.path}\\\\nData: {repo.get(delta.old_file.id).data}\\\\n\\")\\n    print(f\\"New File:\\\\nPath: {delta.new_file.path}\\\\nData: {repo.get(delta.new_file.id).data}\\\\n\\")\\n```\\n\\nResult:\\n\\n```bash\\nStatus:  M\\nOld File:\\nPath: ini.py\\nData: b\'hii\'\\n\\nNew File:\\nPath: ini.py\\nData: b\'hii\\\\nnewly added line\'\\n```\\n### Iterate over all objects\\n\\nThere are three type of objects\\n1. Commit: Commit object contains File structure, diff, patch everything regarding commit\\n2. Blob: It contains objects of files.\\n3. Tree: It refers to directory of repo\\n\\n```python\\nfor obj_id in repo:\\n    obj = repo.get(obj_id)\\n    print(f\'Object id: {obj.id}, Object type: {obj.type_str}\')\\n```\\nResults:\\n\\n```bash\\nObject id: 2bee0c854238d42b2ad1ec27e615a0ea675771b6, Object type: commit\\nObject id: 4113e3ac744218e9f702ad0bb5313d4c8d79b03c, Object type: tree\\nObject id: 32d328df61352fe95e90dc9342d2f85d2fb07f86, Object type: blob\\nObject id: f54fe20e4975b4934ff5cdf75ce54d1ddb122894, Object type: tree\\nObject id: 04a5899b6f9c0ccd381aaa039b098eaceb5a2f01, Object type: blob\\n.\\n.\\n```\\n### Iterate over all files of commit\\nWe can iterate over all files from the commit object. And we can recursively traverse files and it\'s contents via directory present in the commit."},{"id":"awesome-ml-resources","metadata":{"permalink":"/blog/awesome-ml-resources","editUrl":"https://github.com/InFoCusp/infocusp-blog/tree/main/blog/2022-06-15-awesome-ml-resources.md","source":"@site/blog/2022-06-15-awesome-ml-resources.md","title":"Awesome ML resources","description":"Curated list of resources on various ML topics found after browsing through lots and lots of materials over the years.","date":"2022-06-15T00:00:00.000Z","formattedDate":"June 15, 2022","tags":[{"label":"machine-learning","permalink":"/blog/tags/machine-learning"},{"label":"deep-learning","permalink":"/blog/tags/deep-learning"},{"label":"computer-vision","permalink":"/blog/tags/computer-vision"},{"label":"reinforcement-learning","permalink":"/blog/tags/reinforcement-learning"}],"readingTime":1,"hasTruncateMarker":false,"authors":[{"name":"Falak Shah","title":"Research Scientist @ Infocusp","url":"https://sebastienlorber.com","imageURL":"https://avatars.githubusercontent.com/u/7119249?v=4","key":"falaktheoptimist"}],"frontMatter":{"slug":"awesome-ml-resources","title":"Awesome ML resources","authors":["falaktheoptimist"],"tags":["machine-learning","deep-learning","computer-vision","reinforcement-learning"]},"prevItem":{"title":"pygit2","permalink":"/blog/pygit2"},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"Curated list of resources on various ML topics found after browsing through lots and lots of materials over the years.\\n\\n### Pre requisites for ML:\\n* Linear Algebra refresher: http://cs229.stanford.edu/section/cs229-linalg.pdf\\n* Python numpy refresher: https://cs231n.github.io/python-numpy-tutorial/\\n\\n### Machine Learning Topics:\\n* Optimizers: https://ruder.io/optimizing-gradient-descent/\\n* SVM and kernel functions: https://www.youtube.com/watch?v=XUj5JbQihlU\\n* Xgboost: https://youtu.be/Vly8xGnNiWs\\n* All topics revision: http://cs229.stanford.edu/syllabus.html\\n\\nDeep Learning Topics: \\n* Neural networks : http://karpathy.github.io/neuralnets/\\n* Backprop: https://cs231n.github.io/optimization-2/\\n* CNN: https://cs231n.github.io/convolutional-networks/\\n* RNN: http://karpathy.github.io/2015/05/21/rnn-effectiveness/\\n* LSTM : https://colah.github.io/posts/2015-08-Understanding-LSTMs/ accompanied with CS231n lecture 10\\n\\n* Sequence to sequence models: https://lilianweng.github.io/lil-log/2018/06/24/attention-attention.html or https://www.youtube.com/watch?v=XXtpJxZBa2c&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z&index=8\\n* Attention: https://jalammar.github.io/visualizing-neural-machine-translation-mechanics-of-seq2seq-models-with-attention/\\n* Transformers: Maths/implementation: http://nlp.seas.harvard.edu/2018/04/01/attention.html and https://www.tensorflow.org/tutorials/text/transformer or if you\'re looking for an overview: http://jalammar.github.io/illustrated-transformer/\\n\\n* Gaussian processes/ bayesian optimization: https://www.cs.cornell.edu/courses/cs4780/2018fa/lectures/lecturenote15.html\\n\\n### Particular to computer vision\\n* Faster rcnn : https://tryolabs.com/blog/2018/01/18/faster-r-cnn-down-the-rabbit-hole-of-modern-object-detection/ and flow with code: https://medium.com/@fractaldle/guide-to-build-faster-rcnn-in-pytorch-95b10c273439\\n* Yolo: Entertaining paper- https://pjreddie.com/media/files/papers/YOLOv3.pdf\\n* Centernet: https://medium.com/visionwizard/centernet-objects-as-points-a-comprehensive-guide-2ed9993c48bc\\n\\n### Reinforcement learning\\n* UCL course by David Silver:  https://www.davidsilver.uk/teaching/\\n* Hands on: https://pythonprogramming.net/q-learning-algorithm-reinforcement-learning-python-tutorial/\\n\\n### NLP\\n* Tokenizers: https://blog.floydhub.com/tokenization-nlp/\\n\\n### GNNs:\\n* https://www.youtube.com/watch?v=8owQBFAHw7E\\n* https://twitter.com/PetarV_93/status/1306689702020382720\\n\\n\\n### Top conferences: \\n* ICLR: https://iclr.cc/\\n* Neurips: https://nips.cc/\\n* ICML: https://icml.cc/\\n* ICCV: http://iccv2019.thecvf.com/\\n\\n### Practical/ hands on: \\n* Kaggle (for ML contests/ Data Science kernels):  https://www.kaggle.com/\\n* Google Colab (with free GPU/ TPU): https://colab.research.google.com/\\n* AIcrowd: https://www.aicrowd.com/"},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/InFoCusp/infocusp-blog/tree/main/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","formattedDate":"August 1, 2021","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[{"name":"Jayendra Parmar","title":"Software Engineer @ Infocusp","url":"https://sebastienlorber.com","imageURL":"https://avatars.githubusercontent.com/u/651057?v=4","key":"jayendra"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["jayendra"],"tags":["docusaurus"]},"prevItem":{"title":"Awesome ML resources","permalink":"/blog/awesome-ml-resources"},"nextItem":{"title":"Digital filter design using python","permalink":"/blog/digital-filter-design-using-python"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n\\n:::"},{"id":"digital-filter-design-using-python","metadata":{"permalink":"/blog/digital-filter-design-using-python","editUrl":"https://github.com/InFoCusp/infocusp-blog/tree/main/blog/2020-08-12-digital-filter-design-using-python/index.md","source":"@site/blog/2020-08-12-digital-filter-design-using-python/index.md","title":"Digital filter design using python","description":"Based on this excellent Matlab tutorial. on the subject","date":"2020-08-12T00:00:00.000Z","formattedDate":"August 12, 2020","tags":[{"label":"signal-processing","permalink":"/blog/tags/signal-processing"},{"label":"python","permalink":"/blog/tags/python"},{"label":"filters","permalink":"/blog/tags/filters"}],"readingTime":8.775,"hasTruncateMarker":false,"authors":[{"name":"Falak Shah","title":"Research Scientist @ Infocusp","url":"https://sebastienlorber.com","imageURL":"https://avatars.githubusercontent.com/u/7119249?v=4","key":"falaktheoptimist"}],"frontMatter":{"slug":"digital-filter-design-using-python","title":"Digital filter design using python","authors":["falaktheoptimist"],"tags":["signal-processing","python","filters"]},"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"},"nextItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Based on [this excellent Matlab tutorial](https://in.mathworks.com/help/signal/ug/practical-introduction-to-digital-filter-design.html). on the subject\\n\\n## Introduction\\nThe ideal lowpass filter is one that leaves unchanged all frequency components of a signal below a designated cutoff frequency, \u03c9c , and rejects all components above \u03c9c . Because the impulse response required to implement the ideal lowpass filter is infinitely long, it is impossible to design an ideal FIR lowpass filter. Finite length approximations to the ideal impulse response lead to the presence of ripples in both the passband (\u03c9<\u03c9c) and the stopband (\u03c9>\u03c9c) of the filter, as well as to a nonzero transition width between passband and stopband.\\n\\nBoth the passband/stopband ripples and the transition width are undesirable but unavoidable deviations from the response of an ideal lowpass filter when approximated with a finite impulse response. These deviations are depicted in the following figure:\\n\\n![Docusaurus Plushie](./image1.png)\\n\\nPractical FIR designs typically consist of filters that have a transition width and maximum passband and stopband ripples that do not exceed allowable values. In addition to those design specifications, one must select the filter order,or, equivalently, the length of the truncated impulse response.\\n\\nA useful metaphor for the design specifications in filter design is to think of each specification as one of the angles in the triangle shown in the figure below.\\n\\n![Docusaurus Plushie](./image2.png)\\n\\n\\nThe triangle is used to understand the degrees of freedom available when choosing design specifications. Because the sum of the angles is fixed, one can at most select the values of two of the specifications. The third specification will be determined by the particular design algorithm. Moreover, as with the angles in a triangle, if we make one of the specifications larger/smaller, it will impact one or both of the other specifications.\\n\\nFIR filters are very attractive because they are inherently stable and can be designed to have linear phase. Nonetheless, these filters can have long transient responses and might prove computationally expensive in certain applications.\\n\\n```python\\nimport numpy as np\\nfrom matplotlib import pyplot as plt\\nfrom scipy.signal import *\\n```\\n\\n## Minimum-Order FIR Designs\\n\\nMinimum-order designs are obtained by specifying passband and stopband frequencies as well as a passband ripple and a stopband attenuation. The design algorithm then chooses the minimum filter length that complies with the specifications.\\n\\nDesign a minimum-order lowpass FIR filter with a passband frequency of 0.37pi rad/sample, a stopband frequency of 0.43pi rad/sample (hence the transition width equals 0.06*pi rad/sample), a passband ripple of 1 dB and a stopband attenuation of 30 dB.\\n\\nSee the filtering functionalities available here: https://docs.scipy.org/doc/scipy/reference/signal.html\\n\\n```python\\nfpass = 370 \\nfstop = 430\\nap = 1\\nastop = 30\\nfs = 2000 \\n\\nfiltord = np.ceil(fs/(fstop-fpass) * (astop/22)).astype(np.int32)\\n# https://dsp.stackexchange.com/questions/37646/filter-order-rule-of-thumb?newreg=141e955c67704f9d8b5df855233101c1\\n```\\n\\n```python\\n>> print(\'Order as computed using Fred Harris rule of thumb: {}\'.format(filtord))\\nOrder as computed using Fred Harris rule of thumb: 46\\n```\\n\\n```python\\ndef plot_response(fs, w, h, title=\\"Low-pass Filter\\",label=\'\', ax=None, ylim=-70):\\n    \\"Utility function to plot response functions\\"\\n    if not ax:\\n      fig = plt.figure()\\n      ax = fig.add_subplot(111)\\n    ax.plot(0.5*fs*w/np.pi, 20*np.log10(np.abs(h)), label=label)\\n    ax.set_ylim(ylim, 5)\\n    ax.set_xlim(0, 0.5*fs)\\n    ax.grid(True)\\n    ax.set_xlabel(\'Frequency (Hz)\')\\n    ax.set_ylabel(\'Gain (dB)\')\\n    ax.set_title(title)\\n    ax.legend()\\n    return ax\\n    \\ntaps = remez(filtord, [0, fpass, fstop, 1000], [1, 0], fs = 2000)\\nw, h = freqz(taps, [1], worN=2000)\\nax = plot_response(fs, w, h, label=\'Equiripple\', title=\\"Low-pass Filter\\")\\n```\\n![Docusaurus Plushie](./image3.png)\\n\\nThe designfilt function chooses an equiripple design algorithm by default. Linear-phase equiripple filters are desirable because for a given order they have the smallest possible maximum deviation from the ideal filter.\\n\\nNote, however, that minimum-order designs can also be obtained using a Kaiser window. Even though the Kaiser window method yields a larger filter order for the same specifications, the algorithm is less computationally expensive and less likely to have convergence issues when the design specifications are very stringent. This may occur if the application requires a very narrow transition width or a very large stopband attenuation.\\n\\nDesign a filter with the same specifications as above using the Kaiser window method and compare its response to the equiripple filter.\\n\\n```python\\nfpass = 370\\nfstop = 430\\nastop = 30\\napass = 1\\nfs = 2000\\nfc = fpass + (fstop-fpass)/2\\n\\nfiltord_kaiser, beta = kaiserord(astop, 2*(fstop-fpass)/fs)\\nprint(filtord_kaiser)\\ntaps = firwin(filtord_kaiser, fc, window=(\'kaiser\', beta), \\n              fs=fs)\\nw, h = freqz(taps, [1], worN=2000)\\nax = plot_response(fs, w, h, label=\'Kaiser\', title=\\"Low-pass Filter\\")\\n\\ntaps = remez(filtord, [0, fpass, fstop, 1000], [1, 0], fs = 2000)\\nw, h = freqz(taps, [1], worN=2000)\\nplot_response(fs, w, h, label=\'Equiripple\', title=\\"Low-pass Filter\\", ax=ax)\\n```\\n\\n![Docusaurus Plushie](./image4.png)\\n\\n## Fixed Order, Fixed Transition Width\\n\\nFixed-order designs are useful for applications that are sensitive to computational load or impose a limit on the number of filter coefficients. An option is to fix the transition width at the expense of control over the passband ripple/stopband attenuation.\\n\\nConsider a 30-th order lowpass FIR filter with a passband frequency of 370 Hz, a stopband frequency of 430 Hz, and sample rate of 2 kHz. There are two design methods available for this particular set of specifications: equiripple and least squares. Let us design one filter for each method and compare the results.\\n\\n```python\\nfpass = 370;\\nfstop = 430;\\nfs = 2000;\\nN=30\\n\\ntaps = remez(N, [0, fpass, fstop, 1000], [1, 0], fs = 2000)\\nw, h = freqz(taps, [1], worN=2000)\\nax = plot_response(fs, w, h, label=\'Equiripple\', title=\\"Low-pass Filter\\")\\n\\ntaps = firls(N+1, [0, fpass, fstop, 1000], [1,1,0, 0],  fs = 2000)\\nw, h = freqz(taps, [1], worN=2000)\\nplot_response(fs, w, h, title=\\"Low-pass Filter\\",  label=\'Least squares\',ax=ax)\\n```\\n![Docusaurus Plushie](./image5.png)\\n\\nEquiripple filters are ideally suited for applications in which a specific tolerance must be met, such as designing a filter with a given minimum stopband attenuation or a given maximum passband ripple. On the other hand, these designs may not be desirable if we want to minimize the energy of the error (between ideal and actual filter) in the passband/stopband.\\n\\nIf you want to reduce the energy of a signal as much as possible in a certain frequency band, use a least-squares design.\\n\\nIn the examples above, the designed filters had the same ripple in the passband and in the stopband. We can use weights to reduce the ripple in one of the bands while keeping the filter order fixed. For example, if you wish the stopband ripple to be a tenth of that in the passband, you must give the stopband ten times the passband weight. Redesign the equiripple filter using that fact.\\n\\n```python\\nN = 30;\\nfpass = 370;\\nfstop = 430;\\nfs = 2000;\\n\\ntaps = remez(N, [0, fpass, fstop, 1000], [1, 0], fs = 2000)\\nw, h = freqz(taps, [1], worN=2000)\\nax = plot_response(fs, w, h, label=\'Equiripple\', title=\\"Low-pass Filter\\")\\n\\ntaps = remez(N, [0, fpass, fstop, 1000], [1, 0],[1, 10], fs = 2000)\\nw, h = freqz(taps, [1], worN=2000)\\nplot_response(fs, w, h, title=\\"Low-pass Filter\\", label=\'Equiripple design with weighted stopband\', ax=ax)\\n```\\n\\n## Fixed Order, Fixed Cutoff Frequency\\n\\nYou can design filters with fixed filter order and cutoff frequency using a window design method.\\n\\nYou can use different windows to control the stopband attenuation while keeping the filter order unchanged.\\n\\nFor example, consider a 100-th order lowpass FIR filter with a cutoff frequency of 60 Hz and a sample rate of 1 kHz. Compare designs that result from using a Hamming window, and a Chebyshev window with 90 dB of sidelobe attenuation.\\n\\n```python\\nN = 100\\nfc = 60\\nfs = 1000\\n\\ntaps = firwin(N, fc, window=\'hamming\', \\n              fs=fs)\\nw, h = freqz(taps)\\nax = plot_response(fs, w, h, label=\'Hamming\',ylim=-140, title=\\"Low-pass Filter\\")\\n\\ntaps = firwin(N, fc, window=(\'chebwin\', 90), \\n              fs=fs)\\nw, h = freqz(taps)\\nplot_response(fs, w, h, label=\'Chebwin\', ylim=-140,title=\\"Low-pass Filter\\", ax=ax)\\n```\\n![Docusaurus Plushie](./image7.png)\\n\\n## IIR Filter Design\\nOne of the drawbacks of FIR filters is that they require a large filter order to meet some design specifications. If the ripples are kept constant, the filter order grows inversely proportional to the transition width. By using feedback, it is possible to meet a set of design specifications with a far smaller filter order. This is the idea behind IIR filter design. The term \\"infinite impulse response\\" (IIR) stems from the fact that, when an impulse is applied to the filter, the output never decays to zero.\\n\\nIIR filters are useful when computational resources are at a premium. However, stable, causal IIR filters cannot have perfectly linear phase. Avoid IIR designs in cases where phase linearity is a requirement.\\n\\nAnother important reason for using IIR filters is their small group delay relative to FIR filters, which results in a shorter transient response.\\n\\n## Butterworth Filters\\n\\nButterworth filters are maximally flat IIR filters. The flatness in the passband and stopband causes the transition band to be very wide. Large orders are required to obtain filters with narrow transition widths.\\n\\nDesign a minimum-order Butterworth filter with passband frequency 100 Hz, stopband frequency 300 Hz, maximum passband ripple 1 dB, and 60 dB stopband attenuation. The sample rate is 2 kHz.\\nBlog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n```python\\nFp = 100\\nFst = 300\\nAp = 1\\nAst = 60\\nFs = 2e3\\n```\\n\\n```python\\nsystem_butter = iirdesign(Fp, Fst, Ap, Ast, analog=False, ftype=\'butter\', output=\'ba\', fs=Fs)\\nw, h = freqz(*system_butter)\\nax = plot_response(Fs, w, h, title=\\"Low-pass Filter\\", label=\'Butterworth\')\\n\\nsystem_cheby1 = iirdesign(Fp, Fst, Ap, Ast, analog=False, ftype=\'cheby1\', output=\'ba\', fs=Fs)\\nw, h = freqz(*system_cheby1)\\nplot_response(Fs, w, h, label=\'Chebyshev-I\', ax=ax)\\n\\nsystem_cheby2 = iirdesign(Fp, Fst, Ap, Ast, analog=False, ftype=\'cheby2\', output=\'ba\', fs=Fs)\\nw, h = freqz(*system_cheby2)\\nplot_response(Fs, w, h, label=\'Chebyshev-II\', ax=ax)\\n\\nsystem_ellip = iirdesign(Fp, Fst, Ap, Ast, analog=False, ftype=\'ellip\', output=\'ba\', fs=Fs)\\nw, h = freqz(*system_ellip)\\nplot_response(Fs, w, h, label=\'Elliptic\', ax=ax, ylim=-80)\\n```\\n![Docusaurus Plushie](./image8.png)\\n\\n## Group Delay Comparison\\n\\nWith IIR filters, we need to consider not only the ripple/transition width tradeoff, but also the degree of phase distortion. We know that it is impossible to have linear-phase throughout the entire Nyquist interval. Thus we may want to see how far from linear the phase response is. A good way to do this is to look at the (ideally constant) group delay and see how flat it is.\\n\\nCompare the group delay of the four IIR filters designed above.\\n\\nIf phase is an issue, keep in mind that Butterworth and Chebyshev Type II designs have the flattest group delay and thus introduce the least distortion.\\n\\n```\\nw, gd_butter = group_delay(system_butter)\\nw, gd_cheby1 = group_delay(system_cheby1)\\nw, gd_cheby2 = group_delay(system_cheby2)\\nw, gd_ellip = group_delay(system_ellip)\\n\\n\\nplt.title(\'Digital filter group delay\')\\nplt.plot(w/np.pi*Fs, gd_butter, label=\'Butterworth\')\\nplt.plot(w/np.pi*Fs, gd_cheby1, label=\'Chebyshev-I\')\\nplt.plot(w/np.pi*Fs, gd_cheby2, label=\'Chebyshev-II\')\\nplt.plot(w/np.pi*Fs, gd_ellip, label=\'Elliptic\')\\nplt.ylabel(\'Group delay [samples]\')\\nplt.xlabel(\'Frequency\')\\nplt.legend()\\nplt.grid()\\n```\\n\\n![Docusaurus Plushie](./image8.png)\\n\\n\x3c!-- :::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n```python\\nimport numpy as np\\nfrom matplotlib import pyplot as plt\\nfrom scipy.signal import *\\n```\\n\\n\\n::: --\x3e"},{"id":"long-blog-post","metadata":{"permalink":"/blog/long-blog-post","editUrl":"https://github.com/InFoCusp/infocusp-blog/tree/main/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","formattedDate":"May 29, 2019","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Jayendra Parmar","title":"Software Engineer @ Infocusp","url":"https://sebastienlorber.com","imageURL":"https://avatars.githubusercontent.com/u/651057?v=4","key":"jayendra"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"jayendra","tags":["hello","docusaurus"]},"prevItem":{"title":"Digital filter design using python","permalink":"/blog/digital-filter-design-using-python"}},"content":"This is the summary of a very long blog post,\\n\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\n\\n\x3c!--truncate--\x3e\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}')}}]);